{"version":3,"sources":["index.js"],"names":["fileProgress","document","getElementById","fileSizeValue","fileSelect","mimeSelect","fileName","downloadBtn","MAX_CHUNK","getBytes","size","value","addEventListener","event","classList","add","remove","href","name","encodeURIComponent","options","selectedIndex","dataset","ext","count","i","finished","loop","Math","min","Array","fill","join","setTimeout","e","alert","finish","a","createElement","download","body","appendChild","click","removeChild"],"mappings":";AAAA,IAAMA,EAAeC,SAASC,eAAe,iBACvCC,EAAgBF,SAASC,eAAe,mBACxCE,EAAaH,SAASC,eAAe,eACrCG,EAAaJ,SAASC,eAAe,eACrCI,EAAWL,SAASC,eAAe,aACnCK,EAAcN,SAASC,eAAe,gBAEtCM,EAAY,MAElB,SAASC,IACDC,IAAAA,EAAOP,EAAcQ,MACnBP,OAAAA,EAAWO,OACZ,IAAA,IACID,OAAAA,EACJ,IAAA,KACI,OAAA,KAAOA,EACX,IAAA,KACI,OAAA,QAAcA,GAI3BH,EAAYK,iBAAiB,QAAS,SAAAC,GACpCN,EAAYO,UAAUC,IAAI,QAC1Bf,EAAac,UAAUE,OAAO,QACxBN,IAAAA,EAAOD,IACTQ,EAAeZ,QAAAA,OAAAA,EAAWM,MAA9B,mBACMO,EAAUC,GAAAA,OAAAA,mBAAmBb,EAASK,OAAUN,KAAAA,OAAAA,EAAWe,QAAQf,EAAWgB,eAAeC,QAAQC,KACvGC,EAAQ,EACRC,EAAI,EACJC,GAAW,GACd,SAASC,IAKJF,GAJJA,IACAD,GAASI,KAAKC,IAAIrB,EAAWE,GAC7BV,EAAaW,MAAiB,IAARa,EAAed,EACrCO,GAAQa,MAAMF,KAAKC,IAAIrB,EAAWE,IAAOqB,KAAK,KAAKC,KAAK,IACpDP,EAAIf,EAAOF,EACT,IACFyB,WAAWN,EAAM,GACjB,MAAOO,GAEDA,MADNC,MAAMD,GACAA,OAGRR,GAAW,EAbd,GAiBA,SAASU,IACJV,GAAAA,EAAU,CACNW,IAAAA,EAAIpC,SAASqC,cAAc,KACjCD,EAAEpB,KAAOA,EACToB,EAAEE,SAAWrB,EACbjB,SAASuC,KAAKC,YAAYJ,GAC1BA,EAAEK,QACFT,WAAW,WACThC,SAASuC,KAAKG,YAAYN,IACzB,GACHrC,EAAac,UAAUC,IAAI,QAC3BR,EAAYO,UAAUE,OAAO,aAE7BiB,WAAWG,EAAQ,KAbtB","file":"file-size.80ded559.js","sourceRoot":"..","sourcesContent":["const fileProgress = document.getElementById('file-progress')\nconst fileSizeValue = document.getElementById('file-size-value')\nconst fileSelect = document.getElementById('file-select')\nconst mimeSelect = document.getElementById('mime-select')\nconst fileName = document.getElementById('file-name')\nconst downloadBtn = document.getElementById('download-btn')\n\nconst MAX_CHUNK = 1024*10\n\nfunction getBytes () {\n  const size = fileSizeValue.value\n  switch (fileSelect.value) {\n    case 'B':\n      return size\n    case 'KB':\n      return 1024 * size\n    case 'MB':\n      return 1024 * 1024 * size\n  }\n}\n\ndownloadBtn.addEventListener('click', event => {\n  downloadBtn.classList.add('hide')\n  fileProgress.classList.remove('hide')\n  const size = getBytes()\n  let href = `data:${mimeSelect.value};charset=utf-8,`\n  const name = `${encodeURIComponent(fileName.value)}.${mimeSelect.options[mimeSelect.selectedIndex].dataset.ext}`\n  let count = 0\n  let i = 0;\n  let finished = false;\n  (function loop() {\n    i++\n    count += Math.min(MAX_CHUNK, size)\n    fileProgress.value = (count * 100) / size\n    href += Array(Math.min(MAX_CHUNK, size)).fill('a').join('')\n    if (i < size / MAX_CHUNK) {\n      try {\n        setTimeout(loop, 0)\n      } catch (e) {\n        alert(e)\n        throw e\n      }\n    } else {\n      finished = true\n    }\n  })();\n\n  (function finish () {\n    if (finished) {\n      const a = document.createElement('a')\n      a.href = href\n      a.download = name\n      document.body.appendChild(a)\n      a.click()\n      setTimeout(() => {\n        document.body.removeChild(a)\n      }, 0)\n      fileProgress.classList.add('hide')\n      downloadBtn.classList.remove('hide')\n    } else {\n      setTimeout(finish, 100)\n    }\n  })()\n})\n"]}